sample_size <- pwr.t.test(NULL, effect_size, alpha, power)
# Conduct t-test comparing the two sample means
ttest_result <- t.test(control_sample[, 1], treatment_sample[, 1])
curve(dnorm(x),
xlim = c(-4, 4),
main = "Rejection Region of a Right-Sided Test",
yaxs = "i",
xlab = "t-statistic",
ylab = "",
lwd = 2,
axes = "F")
# add the x-axis
axis(1,
at = c(-4, 0, 1.64, 4),
padj = 0.5,
labels = c("", 0, expression(PhiË†-1~(.95)==1.64), ""))
# shade the
polygon(x =
y =
col
rejection region in the left tail
c(1.64, seq(1.64, 4, 0.01), 4),
c(0, dnorm(seq(1.64, 4, 0.01)), 0),
= "darkred")
library(MASS)
# set random seed
set.seed(1)
# positive correlation (0.81)
example1 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, 2, 2, 3), ncol = 2),
empirical = TRUE)
# negative correlation (-0.81)
example2 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, -2, -2, 3), ncol = 2),
empirical = TRUE)
# no correlation
example3 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(1, 0, 0, 1), ncol = 2),
empirical = TRUE)
# no correlation (quadratic relationship)
X <- seq(-3, 3, 0.01)
Y <- - X^2 + rnorm(length(X))
example4 <- cbind(X, Y)
# divide plot area as 2-by-2 array
par(mfrow = c(2, 2))
# plot datasets
plot(example1, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0.81")
plot(example2, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = -0.81")
plot(example3, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
plot(example4, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
View(example4)
m1  <-  lm(Y ~ X, data = example4)
df <- data.frame(X, Y)
m1  <-  lm(Y ~ X, data = df)
summary(m1)
library(tidyverse)
mutate(df, x2=x*x)
mutate(df, x2=X*X)
m2  <-  lm(Y ~ x2, data = df)
summary(m2)
mutate(df, x2 = X*X)
as_tibble(df)
mutate(df, x2 = X*X)
df %>% mutate(df, x2 = X*X)
df %>% mutate(x2 = X*X)
df %>% mutate(x2 = X * X)
df <- df %>% mutate(x2 = X * X)
m1  <-  lm(Y ~ X, data = df)
summary(m1)
m2  <-  lm(Y ~ x2, data = df)
summary(m2)
df %>% plot(Y ~ X)
plot(Y ~ X, df)
# set random seed
set.seed(1)
# positive correlation (0.81)
example1 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, 2, 2, 3), ncol = 2),
empirical = TRUE)
# negative correlation (-0.81)
example2 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, -2, -2, 3), ncol = 2),
empirical = TRUE)
# no correlation
example3 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(1, 0, 0, 1), ncol = 2),
empirical = TRUE)
# no correlation (quadratic relationship)
X <- seq(-3, 3, 0.01)
Y <- - X^2 + rnorm(length(X))
example4 <- cbind(X, Y)
df <- data.frame(X, Y)
# divide plot area as 2-by-2 array
par(mfrow = c(2, 2))
# plot datasets
plot(example1, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0.81")
plot(example2, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = -0.81")
plot(example3, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
plot(example4, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
library(tidyverse)
library(readxl)
read_excel(https://github.com/lisamarie0509/swirl-class/blob/main/Customer%20data.xlsx?raw=true)
read_excel(https://github.com/lisamarie0509/swirl-class/blob/main/Customer%20data.xlsx)
read_excel(https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx)
as_tibble(df)
read_excel(https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx)
read_excel("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.xlsx")
read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer 20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/blob/main/Customer%20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/blob/main/Customer 20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
?read_csv
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", delim=;)
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", delim=";")
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", delim=;)
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
problems()
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", sep=";")
read.csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", sep=";")
sss <- read.csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", sep=";")
View(sss)
sss <- read_csv2("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
sss <- read_csv2("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
sss <- read_csv2("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer 20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
read_excel("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.xlsx")
problems()
serq <- read_excel("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.xlsx")
```{r data generation, echo = FALSE, results = "hide"}
d <- data.frame(x = runif(100, -1, 1))
a <- 0
b <- sample(c(-1, 1), 1) * sample(c(0, 0.6, 0.9), 1)
d$y <- a + b * d$x + rnorm(100, sd = 0.25)
write.csv(d, "regression.csv", row.names = FALSE, quote = FALSE)
m <- lm(y ~ x, data = d)
bhat <- coef(m)[2]
bpvl <- summary(m)$coefficients[2, 4]
bsol <- c(bpvl >= 0.05, (bpvl < 0.05) & (bhat > 0), (bpvl < 0.05) & (bhat < 0))
plot(y ~ x, data = d)
To replicate the analysis in R:
```
## data
d <- read.csv("regression.csv")
## regression
m <- lm(y ~ x, data = d)
summary(m)
## visualization
plot(y ~ x, data = d)
abline(m)
```
?fmt
??fmt
install.packages("gt")
library("gt")
install.packages("exams")
?exams
??exams
devtools::install_github("koncina/unilur")
1:3 + 1:10
devtools::install_github("jrnold/r4ds-exercise-solutions")
Run `ggplot(data = mpg)` what do you see?
devtools::install_github("jonotuke/examMarking")
??examMarking
## ----------------------------------------------------------------------------------------
## install.packages("tidyverse")
library(tidyverse)
## list of pre loaded data
data()
# the mpg data set
data(mpg)
?mpg
head(mpg)
tail(mpg)
## list of pre loaded data
data()
seq(1,3)
seq(1,3,3)
seq(1,12,3)
seq(1,120,3)
112 115 118
tail()
tail(deaths)
tail(covid)
# install.packages("tidyverse")
# install.packages("ggpubr")
# install.packages("sjPlot")
library("tidyverse")
library("ggpubr")
library("sjPlot")
load(url("https://github.com/hubchev/courses/raw/main/dta/forest.Rdata"))
head(df)
tail(df)
dim(df)
summary(df)
df <- rename(df, country=country.x)
df <- rename(df, year=date)
df <- df %>%
mutate(gdp_pc = gdp/pop)
ggplot(df, aes(x = gdp_growth, y = unemployment_dif)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE)
#18
ggplot(df, aes(x=gdp_growth, y=unemployment_dif)) + geom_point() +
stat_smooth(formula = y~x, method="lm", se=FALSE)
#15plot(df)
#16
plot(data=df(df$year==2015))
#15
plot(df)
#19
ggplot(df, aes(x=gdp_growth, y=unemployment_dif, label=income)) +
geom_point() + stat_smooth(formula = y~x, method="lm", se=FALSE) +
+
# geom_text(hjust=0, vjust=0) +
+
ggtitle("high income")
#18
ggplot(df, aes(x=gdp_growth, y=unemployment_dif)) + geom_point() +
stat_smooth(formula = y~x, method="lm", se=FALSE)
#19
ggplot(df, aes(x=gdp_growth, y=unemployment_dif, label=income)) +
geom_point() + stat_smooth(formula = y~x, method="lm", se=FALSE)
#20
ggarrange
ggplot(df, aes(x=gdp_growth, y=unemployment_dif, label=income)) +
geom_point() + stat_smooth(formula = y~x, method="lm", se=FALSE) +
+
# geom_text(hjust=0, vjust=0) +
+
ggtitle("high income")
ggplot(df, aes(x=gdp_growth, y=unemployment_dif, label=income)) +
geom_point() + stat_smooth(formula = y~x, method="lm", se=FALSE) +
+
# geom_text(hjust=0, vjust=0) +
+
ggtitle("low income")
#12
df <- df %>%
mutate(gdp_pc) = gdp/pop
#13
df %>%
group_by(income) %>%
summarise(meanunemploy = mean(unemployment), meangdp_pc = mean(gdp_pc))
#14
df%>%
group_by(year==2020) %>%
summarise(df, year, unemployment_diff, gdppc)
#15
pairs(~ gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif,
data = data(gdp))
#15
pairs(~ gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif,
data = df)
#18df %>%
ggplot(aes(gdp_growth,unemployment_diff)) +
geom_point(size=3) +
geom_smooth(method = lm, se = FALSE)
#18
df %>%
ggplot(aes(gdp_growth,unemployment_diff)) +
geom_point(size=3) +
geom_smooth(method = lm, se = FALSE)
#18
df %>%
ggplot(aes(gdp_growth,unemployment_dif)) +
geom_point(size=3) +
geom_smooth(method = lm, se = FALSE)
#21
#In the graphs you can see how the variables unemployment_dif and gdp_growth
#affect each other, if it is a High income country and once, if it is a Low
#income country. With High income you can see that the dispersion is realatively
#wide, unlike Low income. Than with Low income. Low income have an unstable
#correlation between the variable. High income, the other side, see that
#unemployment_dif is, the higher is the gdp_growth.
#22
reg_base <- lm(unemployment_dif ~ gdp_growth, data = df)
#I try this with the Panel, there is a mistake.
#23
summary(reg_base)
# 14
df %>%
filter(year > 2020) %>%
group_by(income) %>%
summarise(m_unemployment = mean(unemployment),
m_gdp_pc = mean(gdp_pc),
unemployment_dif,
gdp_growth)
# 14
df %>%
filter(year == 2020) %>%
group_by(income) %>%
summarise(m_unemployment = mean(unemployment),
m_gdp_pc = mean(gdp_pc),
unemployment_dif,
gdp_growth)
# 13
df %>%
group_by(income) %>%
summarise(m_unemployment = mean(unemployment),
m_gdp_pc = mean(gdp_pc))
# 14
df %>%
filter(year == 2020) %>%
group_by(income) %>%
summarise(m_unemployment = mean(unemployment),
m_gdp_pc = mean(gdp_pc),
unemployment_dif,
gdp_growth)
# 14
df %>%
filter(year == 2020) %>%
group_by(income) %>%
summarise(m_unemployment = mean(unemployment),
m_gdp_pc = mean(gdp_pc))
# 15
pairs(~gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif, data =
df,
main = "Scatterplot Matrix")
# 16
pairs(~gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif + year
== 2015,
data = df, main = "Scatterplot Matrix")
# 17cor(df$unemployment_dif, df$gdp_growth, method = c("pearson"))
# 18
ggplot(df, aes(x=gdp_growth, y=unemployment_dif))+
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="blue",
linetype=1)
# 19
ggplot(df, aes(x=gdp_growth, y=unemployment_dif)) +
geom_point( aes(income = "High income")) +
stat_smooth(formula = y ~ x, method = "lm",
se = FALSE, colour = "blue", linetype = 1) +
ggtitle("High income")
ggplot(df, aes(x=gdp_growth, y=unemployment_dif)) +
geom_point( aes(income = "Low income")) +
stat_smooth(formula = y ~ x, method = "lm",
se = FALSE, colour = "blue", linetype = 1)+
ggtitle("Low income")
# 20
gg1 <- ggplot(df, aes(x=gdp_growth, y=unemployment_dif)) +
geom_point( aes(income = "High income")) +
stat_smooth(formula = y ~ x, method = "lm",
se = FALSE, colour = "blue", linetype = 1) +
ggtitle("High income")
gg2 <- ggplot(df, aes(x=gdp_growth, y=unemployment_dif)) +
geom_point( aes(income = "Low income")) +
stat_smooth(formula = y ~ x, method = "lm",
se = FALSE, colour = "blue", linetype = 1)+
ggtitle("Low income")
ggarrange(gg1, gg2)
allobservation <- lm(unemployment_dif ~ gdp_growth, data = df)
summary(allobservation)
highincome <- lm(unemployment_dif ~ gdp_growth, income == "High income",
data = df)
summary(highincome)
lowincome <- lm(unemployment_dif ~ gdp_growth, income == "Low income", data
= df)
summary(lowincome)
# 23
as.table("allobservation", "highincome", "lowincome")
# variables:country, date
#8 there are 11 observations and 6 variables
#9 summary statistics
summary(df)
#13table(df$unemployment, df$gdp_pc)
#14
table(df$unemployment, df$gdppc, df$unemployment_dif, df$gdp_growth)
#15
plot(gdp, gdp_pc, gdp_growth, unemployment, unemployment_dif)
load(url("https://github.com/hubchev/courses/raw/main/dta/forest.Rdata"))
head(df)
tail(df)
dim(df)
summary(df)
df <- rename(df, country=country.x)
df <- rename(df, year=date)
df <- df %>%
mutate(gdp_pc = gdp/pop)
#15
plot(gdp, gdp_pc, gdp_growth, unemployment, unemployment_dif)
results <- lm(unemployment_dif ~ gdp_growth, data=df)
cor.test(df$unemployment_dif, df$gdp_growth)
summary(results)
#18
ggplot(df, (x=gdp_growth, y=unemployment_dif))
conf.int = TRUE
plot(unemployment_dif ~ growth
data = df
main= "scatterplot of unemployment_dif and growth"
xlab = "growth (X)",
ylab= "unemplyoment_dif (Y)")
#14
df %>%
group_by(year == 2020) %>%
summarise(df,year,unemployment_dif, gdppc)
#15
pairs(~ gdp + gdp_pc + gdp_growth + unemployment + unemployment_diff, data = df)
#15
pairs(~ gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif, data = df)
df <- df %>%
filter (year == 2015) %>%
paris(~gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif, data = df)
df <- df %>%
filter (year == 2015) %>%
pairs(~gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif, data = df)
df <- df %>%
filter (year == 2015) %>%
pairs(~gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif)
df <- df %>%
filter (year == 2015) %>%
pairs(~gdp + gdp_pc + gdp_growth + unemployment + unemployment_dif, data = .)
#17
cor(df$unemployment_dif, df$gdp_growth, method=c("person"))
#18
df %>%
ggplot(aes(gdp_growth, unemployment_dif)) +
geom_point(size=3)+
geom_smooth(method = lm, se = FALSE)
load(url("https://github.com/hubchev/courses/raw/main/dta/forest.Rdata"))
head(df)
tail(df)
dim(df)
summary(df)
df <- rename(df, country=country.x)
df <- rename(df, year=date)
df <- df %>%
mutate(gdp_pc = gdp/pop)
#18
df %>%
ggplot(aes(gdp_growth, unemployment_dif)) +
geom_point(size=3)+
geom_smooth(method = lm, se = FALSE)
library("swirl")
ls()
rm(list=ls())
install_course_github("hubchev", "swirl-it")
swirl()
# do some calculation for training purpose
x <- 5
x2 <- 6
resultofxandx2 <- x + x2
# do some calculation for training purpose
x <- 99995
x2 <- 6
resultofxandx2 <- x + x2
# do some calculation for training purpose
x <- 9.9995
x2 <- 6
resultofxandx2 <- x + x2
install.packages("swirl")
library("swirl")
rm(list=ls())
install_course_github("hubchev", "swirl-it")
swirl()
sltjd()
skip()
swirl()
x <- 678
rm(list=ls())
ls()
x <- 678
ls()
?ls
?rm
# install.packages("tidyverse")
# install.packages("ggpubr")
# install.packages("sjPlot")
library("tidyverse")
detach("package:forcats", unload = TRUE)
rmarkdown::render("rmarkdown-template.Rmd", "all")
library("knitr")
knit_hooks$set(purl = hook_purl)
setwd("/home/sthu/Dropbox/hsf/github/courses/rmd/")
knit_hooks$set(purl = hook_purl)
rmarkdown::render("rmarkdown-template.Rmd", "all")
library(rmarkdown)
rmarkdown::render("rmarkdown-template.Rmd", "all")
setwd("/home/sthu/Dropbox/hsf/github/courses/rmd/")
getwd()
setwd("/home/sthu/Dropbox/hsf/github/courses/rmd/")
rmarkdown::render("rmarkdown-template.Rmd", "all")
rmarkdown::render("rmarkdown-template.Rmd", "all")
rmarkdown::render("rmarkdown-template.Rmd", "all")
install.packages(c("brew", "broom.helpers", "cli", "cpp11", "crayon", "curl", "datawizard", "devtools", "effectsize", "evaluate", "foreign", "gert", "gtsummary", "insight", "isoband", "jsonlite", "lifecycle", "lvplot", "mnormt", "nlme", "nloptr", "nnet", "parameters", "performance", "psych", "purrr", "ragg", "RCurl", "readr", "rlang", "rmarkdown", "testthat", "tidyselect", "tinytex", "vctrs", "visNetwork", "vroom", "WDI", "webshot"))
install.packages(c("brew", "broom.helpers", "cli", "cpp11", "crayon", "curl", "datawizard", "devtools", "effectsize", "evaluate", "foreign", "gert", "gtsummary", "insight", "isoband", "jsonlite", "lifecycle", "lvplot", "mnormt", "nlme", "nloptr", "nnet", "parameters", "performance", "psych", "purrr", "ragg", "RCurl", "readr", "rlang", "rmarkdown", "testthat", "tidyselect", "tinytex", "vctrs", "visNetwork", "vroom", "WDI", "webshot"))
install.packages(c("brew", "broom.helpers", "cli", "cpp11", "crayon", "curl", "datawizard", "devtools", "effectsize", "evaluate", "foreign", "gert", "gtsummary", "insight", "isoband", "jsonlite", "lifecycle", "lvplot", "mnormt", "nlme", "nloptr", "nnet", "parameters", "performance", "psych", "purrr", "ragg", "RCurl", "readr", "rlang", "rmarkdown", "testthat", "tidyselect", "tinytex", "vctrs", "visNetwork", "vroom", "WDI", "webshot"))
install.packages(c("brew", "broom.helpers", "cli", "cpp11", "crayon", "curl", "datawizard", "devtools", "effectsize", "evaluate", "foreign", "gert", "gtsummary", "insight", "isoband", "jsonlite", "lifecycle", "lvplot", "mnormt", "nlme", "nloptr", "nnet", "parameters", "performance", "psych", "purrr", "ragg", "RCurl", "readr", "rlang", "rmarkdown", "testthat", "tidyselect", "tinytex", "vctrs", "visNetwork", "vroom", "WDI", "webshot"))
rmarkdown::render("rmarkdown-template.Rmd", "all")
library("knitr")
knit_hooks$set(purl = hook_purl)
library(dplyr)
