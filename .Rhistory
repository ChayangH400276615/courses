stat_function(fun=function(x) x^2-2*x)
library("ggplot2")
rm(list = ls())
g+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
x<--10:10
df<-data.frame(x)
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(-3, 3)),aes(x))+ stat_function(fun=function(x) x^4-8*x^2)
dev.off()
number_ticks <- function(n) {function(limits) pretty(limits, n)}
pdf(file="exam-22-01-f2.pdf")
ggplot(data.frame(x=c(-1, 3)),aes(x))+
stat_function(fun=function(x) x^2-2*x)
dev.off()
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=12)                                                                           axis.title=element_text(size=14,face="bold"))
dev.off()
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=12) ,                                                                        axis.title=element_text(size=14,face="bold"))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=22) ,                                                                        axis.title=element_text(size=14,face="bold"))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=30) ,                                                                        axis.title=element_text(size=14,face="bold"))
ggplot(data.frame(x=c(-1, 3)),aes(x))+
stat_function(fun=function(x) x^2-2*x) +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
stat_function(fun=function(x) x^2-2*x) +
ggplot(data.frame(x=c(-1, 3)),aes(x))+
theme(axis.text=element_text(size=30) ,
exit
rm(list = ls())
g+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
x<--10:10
df<-data.frame(x)
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=30) ,                                                                        axis.title=element_text(size=14,face="bold"))
dev.off()
number_ticks <- function(n) {function(limits) pretty(limits, n)}
pdf(file="exam-22-01-f2.pdf")
ggplot(data.frame(x=c(-1, 3)),aes(x))+
theme(axis.text=element_text(size=30) ,
exit
eq = function(x){x^4-8*x^2}
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(1, 10)), aes(x,y)) +
stat_function(fun=function(x) x^4-8*x^2)
dev.off()
library("ggplot2")
rm(list = ls())
g+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
x<--10:10
df<-data.frame(x)
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=30) ,                                                                        axis.title=element_text(size=14,face="bold"))
dev.off()
number_ticks <- function(n) {function(limits) pretty(limits, n)}
pdf(file="exam-22-01-f2.pdf")
ggplot(data.frame(x=c(-1, 3)),aes(x))+
theme(axis.text=element_text(size=30) ,
theme(axis.text=element_text(size=30) ,
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=30) ,                                                                        axis.title=element_text(size=14,face="bold"))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=30) ,                                                                        axis.title=element_text(size=14,face="bold"))
rm(list = ls())
g+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
x<--10:10
df<-data.frame(x)
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))                                                                       axis.title=element_text(size=14,face="bold"))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=52),
axis.title=element_text(size=34,face="bold"))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text=element_text(size=52),
axis.title=element_text(size=34,face="bold"))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text = element_text(size = 20))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text.x = element_text(size = 20))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text.x = element_text(size = 20))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) +
theme(axis.text.y = element_text(size = 20))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))
rm(list = ls())
g+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
x<--10:10
df<-data.frame(x)
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))
dev.off()
g+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
rm(list = ls())
x<--10:10
df<-data.frame(x)
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))  ,
pdf(file="exam-22-01-f1.pdf")
dev.off()
dev.off()
number_ticks <- function(n) {function(limits) pretty(limits, n)}
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))  ,
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))  ,
pdf(file="exam-22-01-f1.pdf")
ggplot(data.frame(x=c(-3, 3)),aes(x))+
stat_function(fun=function(x) x^4-8*x^2) + theme(axis.text=element_text(size=30))
View(input)
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
swirl()
5.7
5+7
x<-5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
info()
z <- c(1.1, 9, 3.14)
info()
bye()
exit()
q()
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
swirl::install_course("A_(very)_short_introduction_to_R")
swirl()
swirl()
swirl()
?seq
ls()
rm(list=ls())
library("swirl")
swirl()
uninstall_all_courses()
swirl()
skip()
install_course_github("swirldev", "R_Programming_E")
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
21 + 16
(11*2.3)^2 + 3*(log(15)) * pi + sin(1/5)
21 + 16
21 + 16
(11*2.3)^2 + 3*(log(15)) * pi + sin(1/5)
# numeric/double: 2, 15.5
number1 <- 55 # Assign a value to a variable
21 + 16
(11*2.3)^2 + 3*(log(15)) * pi + sin(1/5)
# numeric/double: 2, 15.5
number1 <- 55 # Assign a value to a variable
Number2 = 66 # = is the same as <-, but <- is the standard as it is directional
number1 + number2
x <- rnorm(1000, mean = 100, sd = 10)
x # Simply print the content of a variable
x <- 127:987
x_mean <- mean(x)
x - x_mean
library("swirl")
install_course_dropbox("https://www.dropbox.com/s/6tkif7puk8gwxxo/R-Workshop_for_home.zip?dl=0")
swirl()
nxt()
?swirl
??swirl
nxt()
skip
skip()
install.packages('WDI')
WDIsearch('gdp')
library('WDI')
WDIsearch('gdp')
library("swirl")
library("swirlify")
?swirlify
library("swirl")
swirl::install_course("Regression Models")
swirl()
skip()
skip()
skip()
skip()
skip()
swirl::install_course_github("kosukeimai", "qss-swirl")
swirl()
8-2
10Â²
10^2
sqrt(9)
result <- 8-2
result
course <- "social science"
skip()
bye()
install_course("Writing_swirl_Courses")
install_course("Writing swirl Courses")
?swirl
install_course_github("swirldev", "swirl_courses", "Writing_swirl_Courses")
swirl()
swirl()
uninstall_all_courses()
install_course_github("swirldev", "swirl_courses")
swirl()
uninstall_all_courses()
swirl()
swirl()
## ----setup, include=FALSE-----------------------------------------------------
library("knitr")
knit_hooks$set(purl = hook_purl)
## ---- echo = TRUE-------------------------------------------------------------
library("haven")
classdata <- read.csv("https://raw.githubusercontent.com/hubchev/courses/main/dta/classdata.csv")
head(classdata)
summary(classdata)
## ----pressure, echo=TRUE------------------------------------------------------
library("ggplot2")
ggplot(classdata, aes(x=height, y=weight)) + geom_point()
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="red", linetype=1)
knitr::opts_chunk$set(echo = TRUE)
# create some data `x`
x <- c(0.109, 0.359, 0.63, 0.996, 0.515, 0.142, 0.017, 0.829, 0.907)
x
# take the logarithm of `x`,
x2 <- log(x)
## ----setup, include=FALSE-----------------------------------------------------
library("knitr")
knit_hooks$set(purl = hook_purl)
## ---- echo = TRUE-------------------------------------------------------------
library("haven")
## ---- echo = TRUE-------------------------------------------------------------
install.packages("haven")
install.packages("haven")
library("haven")
classdata
classdata <- read.csv("https://raw.githubusercontent.com/hubchev/courses/main/dta/classdata.csv")
View(classdata)
head(classdata)
summary(classdata)
summary(classdata$weight)
## ----pressure, echo=TRUE------------------------------------------------------
# install.packages("tidyverse")
library("ggplot2")
## ----pressure, echo=TRUE------------------------------------------------------
# install.packages("tidyverse")
library("tidyverse")
ggplot(classdata, aes(x=height, y=weight)) +
geom_point()
ggplot(classdata, aes(x=height, y=weight))
ggplot(classdata, aes(x=height, y=weight)) +
geom_point()
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="red", linetype=1)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", colour="red", linetype=1)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="red", linetype=1)
?stat_smooth
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, linetype=1)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="black", linetype=1)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="black", linetype=2)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="black", linetype=3)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="black", linetype=4)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="black", linetype=5)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="black", linetype=6)
## ---- echo=TRUE---------------------------------------------------------------
## baseline regression  model
model  <- lm(weight ~ height + sex , data = classdata )
## ---- echo=TRUE---------------------------------------------------------------
## baseline regression  model
asdflaksjdfla  <- lm(weight ~ height + sex , data = classdata )
View(asdflaksjdfla)
show(model)
View(model)
interm <- model$coefficients[1]
slope  <- model$coefficients[2]
interw <- model$coefficients[1]+model$coefficients[3]
## ---- echo=TRUE---------------------------------------------------------------
summary(model)
head(classdata)
summary(classdata)
ggplot(classdata, aes(x=height, y=weight))
ggplot(classdata, aes(x=height, y=weight)) +
geom_point()
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight)) +
geom_point() +
stat_smooth(formula=y~x, method="lm", se=FALSE, colour="black", linetype=6)
## ---- echo=TRUE---------------------------------------------------------------
summary(model)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point() +
geom_abline(slope = slope, intercept = interw, linetype = 2, size=1.5)+
geom_abline(slope = slope, intercept = interm, linetype = 2, size=1.5) +
geom_abline(slope = coef(model)[[2]], intercept = coef(model)[[1]])
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point( aes(size = 2)) +
stat_smooth(formula = y ~ x,  method = "lm",
se = FALSE, colour = "red", linetype = 1)
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point()
?aes
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point( aes(size = 2)) +
stat_smooth(formula = y ~ x,  method = "lm",
se = FALSE, colour = "red", linetype = 1)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point( aes(size = siblings))
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point( aes(size = siblings)) +
stat_smooth(formula = y ~ x,  method = "lm",
se = FALSE, colour = "red", linetype = 1)
## ---- echo=TRUE---------------------------------------------------------------
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point( aes(size = siblings)) +
stat_smooth(formula = y ~ x,  method = "lm",
se = TRUE, colour = "red", linetype = 1)
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point( aes(size = 2)) +
stat_smooth(formula = y ~ x,
method = "lm",
se = T,
colour = "red",
linetype = 1)
m1 <- lm(weight ~ height , data = classdata )
m2 <- lm(weight ~ height + sex , data = classdata )
m3 <- lm(weight ~ height + sex + height * sex , data = classdata )
m4 <- lm(weight ~ height + sex + height * sex + siblings , data = classdata )
m5 <- lm(weight ~ height + sex + height * sex , data = subset(classdata, siblings < 4 ))
library(sjPlot)
tab_model(m1, m2, m3, m4, m5,
p.style = "stars",
p.threshold = c(0.2, 0.1, 0.05),
show.ci = FALSE,
show.se = FALSE)
ggplot(classdata, aes(x=height, y=weight, shape = sex)) +
geom_point( aes(size = 2)) +
stat_smooth(formula = y ~ x,
method = "lm",
se = T,
colour = "red",
linetype = 1)
knitr::opts_chunk$set(echo = TRUE)
# create some data `x`
x <- c(0.109, 0.359, 0.63, 0.996, 0.515, 0.142, 0.017, 0.829, 0.907)
x
# take the logarithm of `x`,
x2 <- log(x)
x2
diff(
# compute the lagged and iterated differences (see `diff()`)
x3 <- diff(x2)
x3
# compute the lagged and iterated differences (see `diff()`)
x3 <- diff(x2)
x3
# compute the exponential function
x4 <- exp(x3)
x4
#  Make yourself familiar with the functions round() and round the result (1 digit)
x5 <- round(x4, 1)
x5
x <- c(0.109, 0.359, 0.63, 0.996, 0.515, 0.142, 0.017, 0.829, 0.907)
# load one of these packages: `magrittr` or `tidyverse`
library(tidyverse)
library("datasets")
iris
head(iris)
iris <-  iris
View(iris)
iris %>%
subset(Sepal.Length > 5) %>%
aggregate(. ~ Species , . , mean)
# set working directory
setwd("/home/sthu/Dropbox/hsf/github/courses/")
rm(iris)
iris <-  iris
sdf <- 123
rm(sdf)
sdf <- 123
list = ls()
ls()
# clear the environment
rm(list = sdf list)
# clear the environment
rm(list = "sdf" "list")
# clear the environment
rm(list = "sdf", "list")
# clear the environment
rm(list = ls() )
# Let us do the following:
# 1. check if a package is installed
# 2. if not installed the package should be installed and loaded
# 3. if installed the package should be loaded
# I like to do it with a function that is part of pacman package:
if (!require("pacman")) {install.packages("pacman")}
pacman::p_load(haven, tidyverse, vtable, gtsummary, pastecs, Hmisc,
sjlabelled, tis, ggpubr, sjPlot)
# import data
data <- read_dta("dta/convergence.dta")
View(data)
# inspect data
names(data)
str(data)
data
head(data)
tail(data)
summary(data)
#library(vtable)
vtable(data, missing=TRUE)
# library(pastecs)
stat.desc(data)
# library(Hmisc)
describe(data)
# library(gtsummary)
tbl_summary(data)
# check the assignements of countries to continents
data %>%
select(country, africa, asia, weurope) %>%
view()
# check the assignements of countries to continents
data %>%
select(country, africa, asia, weurope) %>%
view()
