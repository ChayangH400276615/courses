quit()
round(8.45,digits = 3)
round(8.45111111,digits = 3)
round(8.45111111,digits = 1)
round(8.45111111,1)
round(digits = 1, 8.12345)
round(1, 8.12345)
?mean
?round
data()
data("mtcars")
force(mtcars)
View(mtcars)
head(mtcars)
head(mtcars)
?mtcars
summary(mtcars$mpg)
swirlify()
library("swirl")
library("swirlify")
swirlify()
?swirlify
ls()
View(covid)
ls(covid)
head()
head(covid)
summary(covid)
?swirl
?ggplot
library("ggplot2")
?ggplot
?ggplot
??ggplot
data()
data("mtcars")
head(mtcars, 6)
head(mtcars, 6)
?mtcars
library("swirl")
library("swirlify")
?swirl
?swirlify
set_lesson()
swirlify(aaa,bbb)
swirlify("aaa","bbb")
swirlify()
swirlify()
install.packages("knitr")
install.packages("knitr")
install.packages("purl")
?output
library(swirl) # load the swirl package
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
library("swirlify")
?swirlify
uninstall_all_courses()
install_course_github("hubchev", "swirl-it")
swirl()
library(swirl)
swirl()
10            +    1
10+
1
15+
getwd(
)
12+2
this_is_my_result <- 12 + 2
this_is_my_result
this_is_my_result - 3
this_is_my_result <- 12 + 6
23 - 4 -> res2
23 - 2 = res3
res3=23 - 2
objname_222 <- 87
8^(1/2)
sqrt(8)
sqrt(9)
9^(1/2)
sqrt(8)*(3/4+7^(-2))*9/2
result_exe <- sqrt(8)*(3/4+7^(-2))*9/2
round(result_exe)
?round
round(result_exe, digits=0)
round(result_exe)
round(result_exe, digits=6)
round(result_exe, digits=2)
rounded_result <- round(result_exe, digits=6)
rounded_result <- round(result_exe, digits=2)
?sqrt
abs(3)
abs(-3)
1/3*8^3
1000/1,1
1000/1.1
?submit
?submit()
??submit
install.packages("magick")
install.packages("magick")
install.packages("canlang")
version()
?version
R.Version()
install.packages("installr")
library("installr")
updateR()
R.Version()
# install.packages("devtools")
devtools::install_github("ttimbers/canlang")
install.packages("devtools")
install.packages("devtools")
# install.packages("devtools")
devtools::install_github("ttimbers/canlang")
devtools::install_github("ttimbers/canlang")
install.packages("cowplot")
updateR()
library("installr")
updateR()
# First step: generate two populations.
set.seed(123)
control_pop <- rnorm(1000, 25, 5) # rnorm(n, mean, sd)
rm(list = ls())
# First step: generate two populations.
set.seed(123)
control_pop <- rnorm(1000, 25, 5) # rnorm(n, mean, sd)
set.seed(123)
treatment_pop <- rnorm(1000, 22, 5)
# Simulate an experiment where samples are drawn from the populations
random_sample <- function(seed, size, pop) {
set.seed(seed)
return(sample(pop, size))
}
# Call random_sample function 100 times using different seeds
# And each time taking a sample of size 25
seeds <- 1:100
control_sample <- sapply(seeds, random_sample, 25, control_pop)
treatment_sample <- sapply(seeds, random_sample, 25, treatment_pop)
means_control <- rowMeans(control_sample)
means_treatment <- rowMeans(treatment_sample)
rm(list = ls())
# First step: generate two populations.
set.seed(123)
control_pop <- rnorm(1000, 25, 5) # rnorm(n, mean, sd)
set.seed(123)
treatment_pop <- rnorm(1000, 22, 5)
# Simulate an experiment where samples are drawn from the populations
random_sample <- function(seed, size, pop) {
set.seed(seed)
return(sample(pop, size))
}
# Call random_sample function 100 times using different seeds
# And each time taking a sample of size 25
seeds <- 1:100
?saplly
?sapply
# Call random_sample function 100 times using different seeds
# And each time taking a sample of size 25
seeds <- 1:100
control_sample <- sapply(seeds, random_sample, 25, control_pop)
View(control_sample)
treatment_sample <- sapply(seeds, random_sample, 25, treatment_pop)
means_control <- rowMeans(control_sample)
means_treatment <- rowMeans(treatment_sample)
View(treatment_sample)
# Visual comparisons of the control and treatment sample means
stripchart(list(means_control, means_treatment), pch=1, col=c("blue", "red"), method="jitter",
xlim=c(0, 3), vertical=TRUE,
group.names=c("Control", "Treatment"),
main="Sample means",
ylab="Mouse weight (grams)")
# More graphical analysis using histogram to see
# whether the data is normally distributed
hist(means_control, xlab="Weight (grams)",
main="Distribution of control mean samples")
# Visual comparisons of the control and treatment sample means
stripchart(list(means_control, means_treatment), pch=1, col=c("blue", "red"), method="jitter",
xlim=c(0, 3), vertical=TRUE,
group.names=c("Control", "Treatment"),
main="Sample means",
ylab="Mouse weight (grams)")
# More graphical analysis using histogram to see
# whether the data is normally distributed
hist(means_control, xlab="Weight (grams)",
main="Distribution of control mean samples")
hist(means_treatment, xlab="Weight (grams)",
main="Distribution of control mean samples")
hist(means_treatment, xlab="Weight (grams)",
main="Distribution of control mean samples")
# More graphical analysis using histogram to see
# whether the data is normally distributed
hist(means_control, xlab="Weight (grams)",
main="Distribution of control mean samples")
# More graphical analysis using histogram to see
# whether the data is normally distributed
hist(means_control, xlab="Weight (grams)",
main="Distribution of control mean samples")
# Create another stripchart to compare individual weights
# within sample 1 of control & treatment
stripchart(list(control_sample[, 1], treatment_sample[, 1]),
pch=1, xlim=c(0, 3), vertical=TRUE,
group.names = c("Control", "Treatment"),
main="Weights of mice",
ylab="Mouse weight (grams)")
segments(0.6, mean(control_sample[, 1]), 1.4,
mean(control_sample[, 1]), col="blue")
segments(1.6, mean(treatment_sample[, 1]), 2.4,
mean(treatment_sample[, 1]), col="red")
# Define function to compute confidence intervals
# Critical value = the value on the x-axis outside of whos area gives 0.05
conf_interval <- function(sample, alpha){
critical_value <- qt(1 - (alpha/2), 24) # alpha/2 (two tails), 24 degrees of freedom
standard_error <- sd(sample) / sqrt(25)
lower <- mean(sample) - critical_value * standard_error
higher <- mean(sample) + critical_value * standard_error
return(c(lower, higher))
}
# Compute the intervals
conf_interval(control_sample[, 1], 0.05) # (sample, alpha(p-value))
conf_interval(treatment_sample[, 1], 0.05)
# Plot of the conf_intervals
conf_plot <- function(i){
interval <- conf_interval(control_sample[, i], 0.05)
covered <- mean(control_pop) <= interval[2] && mean(control_pop >= interval[1])
color <- ifelse(covered, "green", "blue")
lines(interval, c(i, i), col=color)
}
plot(mean(control_pop) + c(-5, 5), c(1, 1), type="n",
xlab="Weight", ylab="Interval", ylim=c(1, 100),
main="Control sample with 95% CI")
abline(v=mean(control_pop))
for(sample in 1:100)
conf_plot(sample)
# Make sure the data is normally distributed by checking one sample
# using qqplot and histogram
par(mfrow=c(2, 2))
hist(control_sample[, 1], main="Distribution of control sample",
xlab = "Weight (grams)")
qqnorm(control_sample[, 1], main="QQ plot of control sample")
qqline(treatment_sample[, 1], main="Distribution of treatment sample",
xlab = "Weight (grams)")
qqnorm(treatment_sample[, 1], main="QQ plot of treatment sample")
qqline(treatment_sample[, 1])
# The QQ plot show that the samples are reasonably normally distributed
# Hence, conduct a t-test
# Tobs stores the critical values on the distribution function
tobs <- (mean(control_sample[, 1]) - mean(treatment_sample[, 1])) / sqrt(var(control_sample[, 1]) / 25 +
var(treatment_sample[, 1]) / 25)
# acquire p_value from tobs
p_value <- 1 - pt(tobs, 48)
# Conduct t-test comparing the two sample means
ttest_result <- t.test(control_sample[, 1], treatment_sample[, 1])
# Conduct t-test comparing the two sample means
ttest_result <- t.test(control_sample[, 1], treatment_sample[, 1])
# Conclusion: the p-value for one tail is 3.4% and thus 6.9% using two tails. Not significant: type II error.
# Acquire p_values for all 100 samples and plot them as a histogram
all_values <- sapply(1:100, )
par(mfrow=c(1, 1))
hist(all_values, main="P-values from all 100 samples",
xlab="P-value")
all_values <- sapply(1:100, )
# Power calculation for sample 1
install.packages("pwr")
library(pwr)
sample_size <- 25
effect_size <- (mean(control_sample[, 1]) - mean(treatment_sample[, 1])) / sd(control_sample[, 1])
alpha <- 0.05
power <- pwr.t.test(sample_size, effect_size, alpha) # Power is 45%, quite low.
# Calculate needed sample size for power 80%
power <- 0.80
sample_size <- pwr.t.test(NULL, effect_size, alpha, power)
# Conduct t-test comparing the two sample means
ttest_result <- t.test(control_sample[, 1], treatment_sample[, 1])
curve(dnorm(x),
xlim = c(-4, 4),
main = "Rejection Region of a Right-Sided Test",
yaxs = "i",
xlab = "t-statistic",
ylab = "",
lwd = 2,
axes = "F")
# add the x-axis
axis(1,
at = c(-4, 0, 1.64, 4),
padj = 0.5,
labels = c("", 0, expression(PhiË†-1~(.95)==1.64), ""))
# shade the
polygon(x =
y =
col
rejection region in the left tail
c(1.64, seq(1.64, 4, 0.01), 4),
c(0, dnorm(seq(1.64, 4, 0.01)), 0),
= "darkred")
library(MASS)
# set random seed
set.seed(1)
# positive correlation (0.81)
example1 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, 2, 2, 3), ncol = 2),
empirical = TRUE)
# negative correlation (-0.81)
example2 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, -2, -2, 3), ncol = 2),
empirical = TRUE)
# no correlation
example3 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(1, 0, 0, 1), ncol = 2),
empirical = TRUE)
# no correlation (quadratic relationship)
X <- seq(-3, 3, 0.01)
Y <- - X^2 + rnorm(length(X))
example4 <- cbind(X, Y)
# divide plot area as 2-by-2 array
par(mfrow = c(2, 2))
# plot datasets
plot(example1, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0.81")
plot(example2, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = -0.81")
plot(example3, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
plot(example4, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
View(example4)
m1  <-  lm(Y ~ X, data = example4)
df <- data.frame(X, Y)
m1  <-  lm(Y ~ X, data = df)
summary(m1)
library(tidyverse)
mutate(df, x2=x*x)
mutate(df, x2=X*X)
m2  <-  lm(Y ~ x2, data = df)
summary(m2)
mutate(df, x2 = X*X)
as_tibble(df)
mutate(df, x2 = X*X)
df %>% mutate(df, x2 = X*X)
df %>% mutate(x2 = X*X)
df %>% mutate(x2 = X * X)
df <- df %>% mutate(x2 = X * X)
m1  <-  lm(Y ~ X, data = df)
summary(m1)
m2  <-  lm(Y ~ x2, data = df)
summary(m2)
df %>% plot(Y ~ X)
plot(Y ~ X, df)
# set random seed
set.seed(1)
# positive correlation (0.81)
example1 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, 2, 2, 3), ncol = 2),
empirical = TRUE)
# negative correlation (-0.81)
example2 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(2, -2, -2, 3), ncol = 2),
empirical = TRUE)
# no correlation
example3 <- mvrnorm(100,
mu = c(0, 0),
Sigma = matrix(c(1, 0, 0, 1), ncol = 2),
empirical = TRUE)
# no correlation (quadratic relationship)
X <- seq(-3, 3, 0.01)
Y <- - X^2 + rnorm(length(X))
example4 <- cbind(X, Y)
df <- data.frame(X, Y)
# divide plot area as 2-by-2 array
par(mfrow = c(2, 2))
# plot datasets
plot(example1, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0.81")
plot(example2, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = -0.81")
plot(example3, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
plot(example4, col = "steelblue", pch = 20, xlab = "X", ylab = "Y",
main = "Correlation = 0")
library(tidyverse)
library(readxl)
read_excel(https://github.com/lisamarie0509/swirl-class/blob/main/Customer%20data.xlsx?raw=true)
read_excel(https://github.com/lisamarie0509/swirl-class/blob/main/Customer%20data.xlsx)
read_excel(https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx)
as_tibble(df)
read_excel(https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx)
read_excel("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.xlsx")
read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer 20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/blob/main/Customer%20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/blob/main/Customer 20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
?read_csv
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", delim=;)
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", delim=";")
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", delim=;)
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
problems()
read_csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", sep=";")
read.csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", sep=";")
sss <- read.csv("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv", sep=";")
View(sss)
sss <- read_csv2("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
sss <- read_csv2("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
sss <- read_csv2("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.csv")
jjj <- read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer 20data.xlsx")
ccc <-read_excel("https://github.com/lisamarie0509/swirl-class/raw/main/Customer%20data.xlsx")
read_excel("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.xlsx")
problems()
serq <- read_excel("https://raw.githubusercontent.com/lisamarie0509/swirl-class/main/Customer%20data.xlsx")
```{r data generation, echo = FALSE, results = "hide"}
d <- data.frame(x = runif(100, -1, 1))
a <- 0
b <- sample(c(-1, 1), 1) * sample(c(0, 0.6, 0.9), 1)
d$y <- a + b * d$x + rnorm(100, sd = 0.25)
write.csv(d, "regression.csv", row.names = FALSE, quote = FALSE)
m <- lm(y ~ x, data = d)
bhat <- coef(m)[2]
bpvl <- summary(m)$coefficients[2, 4]
bsol <- c(bpvl >= 0.05, (bpvl < 0.05) & (bhat > 0), (bpvl < 0.05) & (bhat < 0))
plot(y ~ x, data = d)
To replicate the analysis in R:
```
## data
d <- read.csv("regression.csv")
## regression
m <- lm(y ~ x, data = d)
summary(m)
## visualization
plot(y ~ x, data = d)
abline(m)
```
?fmt
??fmt
install.packages("gt")
library("gt")
install.packages("exams")
?exams
??exams
devtools::install_github("koncina/unilur")
1:3 + 1:10
devtools::install_github("jrnold/r4ds-exercise-solutions")
Run `ggplot(data = mpg)` what do you see?
devtools::install_github("jonotuke/examMarking")
??examMarking
## ----------------------------------------------------------------------------------------
## install.packages("tidyverse")
library(tidyverse)
## list of pre loaded data
data()
# the mpg data set
data(mpg)
?mpg
head(mpg)
tail(mpg)
## list of pre loaded data
data()
library(tidyverse)
my_variable <- 10
my_varÄ±able
library(tidyverse)
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(dota = mpg) +
geom_point() +
aes(x = displ, y = hwy)
ggplot(data = mpg) +
geom_point() +
aes(x = displ, y = hwy)
fliter(mpg, cyl = 8)
fliter(mpg, cyl == 8)
data %>%
filter(x_1==0) %>%
select(africa, asia, weurope, country) %>%
view()
# set working directory
setwd("/home/sthu/Dropbox/hsf/github/courses/")
# clear the environment
rm(list = ls())
# Let us do the following:
# 1. check if a package is installed
# 2. if not installed the package should be installed and loaded
# 3. if installed the package should be loaded
# I like to do it with a function that is part of pacman package:
if (!require("pacman")) {install.packages("pacman")}
pacman::p_load(haven, tidyverse, vtable, gtsummary, pastecs, Hmisc,
sjlabelled, tis, ggpubr, sjPlot)
# import data
data <- read_dta("dta/convergence.dta")
# inspect data
names(data)
str(data)
data
head(data)
tail(data)
summary(data)
view(data)
#library(vtable)
vtable(data, missing=TRUE)
